pipeline TemperaturesPipeline {

    ZipExtractor ->
    ZipArchiveInterpreter ->
    TempFilePicker ->
    TempTextFileInterpreter ->
    TempCsvInterpreter ->
    TempSelectRange ->
    RenameColumns ->
    RenameBatteryTemperature ->
    TempTableInterpreter ->
    TransformTemperature ->
    TransformBatteryTemperature ->
    TempLoader;
    
    block ZipExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block TempFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TempTextFileInterpreter oftype TextFileInterpreter {}

    block TempCsvInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block TempSelectRange oftype CellRangeSelector {
        select: range A1:K*;
    }

    block RenameColumns oftype CellWriter {
        write: ["id", "producer", "model", "month", "temperature"];
        at: range A1:E1;
    }

    block RenameBatteryTemperature oftype CellWriter {
        write: ["battery_temperature"];
        at: cell J1;
    }

    block TempTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype Id, 
            "producer" oftype text, 
            "model" oftype text, 
            "month" oftype Month, 
            "temperature" oftype decimal, 
            "battery_temperature" oftype decimal
        ];
    }

    valuetype Id oftype integer {
        constraints: [IdCheck];
    }

    constraint IdCheck oftype RangeConstraint {
        lowerBound: 0;
    }

    valuetype Month oftype integer {
        constraints: [];
    }

    constraint MonthCheck oftype RangeConstraint {
        lowerBound: 1;
        upperBound: 12;
    }

    transform CelsiusToFahrenheit {
        from tempCelsius oftype decimal;
        to tempFahrenheit oftype decimal;

        tempFahrenheit: (tempCelsius * 9 / 5) + 32;
    }

    block TransformTemperature oftype TableTransformer{
        inputColumns: ["temperature"];
        outputColumn: "temperature";

        use: CelsiusToFahrenheit;
    }

    block TransformBatteryTemperature oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";

        use: CelsiusToFahrenheit;
    }

    block TempLoader oftype SQLiteLoader {
        file: "./temperatures.sqlite";
        table: "temperatures";
    }
}